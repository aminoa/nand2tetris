// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */

/* * 8-way demultiplexor:
 * [a, b, c, d, e, f, g, h] = [in, 0,  0,  0,  0,  0,  0,  0] if sel = 000
 *                            [0, in,  0,  0,  0,  0,  0,  0] if sel = 001
 *                            [0,  0, in,  0,  0,  0,  0,  0] if sel = 010
 *                            [0,  0,  0, in,  0,  0,  0,  0] if sel = 011
 *                            [0,  0,  0,  0, in,  0,  0,  0] if sel = 100
 *                            [0,  0,  0,  0,  0, in,  0,  0] if sel = 101
 *                            [0,  0,  0,  0,  0,  0, in,  0] if sel = 110
 *                            [0,  0,  0,  0,  0,  0,  0, in] if sel = 111**/

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // demux such that the output is set to 1 based on address
    DMux8Way(in=load, sel=address, a=reg1, b= reg2, c= reg3, d=reg4 , e=reg5, f=reg6, g= reg7, h=reg8);
    Register(in=in, load=reg1, out=reg1out);
    Register(in=in, load=reg2, out=reg2out);
    Register(in=in, load=reg3, out=reg3out);
    Register(in=in, load=reg4, out=reg4out);
    Register(in=in, load=reg5, out=reg5out);
    Register(in=in, load=reg6, out=reg6out);
    Register(in=in, load=reg7, out=reg7out);
    Register(in=in, load=reg8, out=reg8out);

    Mux8Way16(a=reg1out, b=reg2out, c=reg3out, d=reg4out, e=reg5out, f=reg6out, g=reg7out, h=reg8out, sel=address, out=out);

    // damn nice I got it right

}